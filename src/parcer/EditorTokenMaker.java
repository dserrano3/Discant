/* The following code was generated by JFlex 1.6.0 */

package parcer;


import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Daniel/Desktop/EditorTokenMaker.flex</tt>
 */
public class EditorTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\11\1\13\1\14\1\12\22\0\1\10\1\6\1\4"+
    "\1\0\1\0\1\45\1\47\1\3\2\17\1\16\1\50\1\20\1\51"+
    "\1\20\1\15\12\2\1\6\1\20\1\52\1\46\1\53\1\6\1\0"+
    "\32\1\1\17\1\5\1\17\1\6\1\7\1\0\1\37\1\1\1\34"+
    "\1\41\1\25\1\21\1\1\1\31\1\24\1\44\1\1\1\26\1\43"+
    "\1\33\1\22\1\40\1\1\1\23\1\27\1\35\1\32\1\36\1\30"+
    "\2\1\1\42\1\17\1\54\1\17\1\6\6\0\1\13\u1fa2\0\1\13"+
    "\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\5\1\10\14\1\6\5\1\11\1\12\1\11\1\13"+
    "\1\3\1\14\1\3\1\0\1\15\2\4\1\16\1\17"+
    "\5\1\1\20\5\1\1\20\12\1\1\21\1\22\1\23"+
    "\27\1\1\20\13\1\1\20\10\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\132"+
    "\0\u013b\0\132\0\u0168\0\u0195\0\132\0\u01c2\0\u01ef\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\132\0\u0519\0\u0546\0\u0573\0\132\0\u05a0\0\u05cd\0\132"+
    "\0\u05fa\0\u0627\0\u0654\0\132\0\u0681\0\u06ae\0\u06db\0\u0708"+
    "\0\u0735\0\207\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843"+
    "\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab"+
    "\0\u09d8\0\u0a05\0\132\0\132\0\132\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c"+
    "\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0cd5\0\u0e3d\0\u0e6a\0\u0e97"+
    "\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff"+
    "\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167"+
    "\0\u1194";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\10\1\4"+
    "\1\11\1\12\2\0\1\11\1\13\1\14\1\15\1\3"+
    "\1\16\1\4\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\4\4\1\25\1\26\1\4\1\27\1\30\1\4\1\31"+
    "\1\4\2\14\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\11\40\1\41\4\40\1\42\36\40\56\0\2\4\4\0"+
    "\1\4\11\0\24\4\10\0\2\43\1\5\2\0\1\43"+
    "\1\0\1\43\3\0\1\43\5\0\24\43\10\0\3\44"+
    "\1\45\1\44\1\46\3\44\1\47\43\44\4\7\1\50"+
    "\1\51\3\7\1\52\43\7\10\0\1\11\3\0\1\11"+
    "\55\0\1\53\1\54\27\0\1\10\54\0\1\10\7\0"+
    "\2\4\4\0\1\4\11\0\1\4\1\55\1\4\1\56"+
    "\5\4\1\57\4\4\1\60\5\4\11\0\2\4\4\0"+
    "\1\4\11\0\4\4\1\61\17\4\11\0\2\4\4\0"+
    "\1\4\11\0\1\62\11\4\1\63\7\4\1\64\1\4"+
    "\11\0\2\4\4\0\1\4\11\0\5\4\1\65\16\4"+
    "\11\0\2\4\4\0\1\4\11\0\3\4\1\66\1\67"+
    "\17\4\11\0\2\4\4\0\1\4\11\0\3\4\1\70"+
    "\1\71\17\4\11\0\2\4\4\0\1\4\11\0\10\4"+
    "\1\72\13\4\11\0\2\4\4\0\1\4\11\0\2\4"+
    "\1\73\13\4\1\74\5\4\11\0\2\4\4\0\1\4"+
    "\11\0\4\4\1\75\11\4\1\55\5\4\11\0\2\4"+
    "\4\0\1\4\11\0\2\4\1\76\6\4\1\77\4\4"+
    "\1\100\5\4\11\0\2\4\4\0\1\4\11\0\4\4"+
    "\1\101\17\4\11\0\2\4\4\0\1\4\11\0\3\4"+
    "\1\102\20\4\57\0\1\10\53\0\1\10\1\0\1\10"+
    "\52\0\1\10\2\0\1\10\55\0\1\14\55\0\1\14"+
    "\55\0\1\10\11\40\1\0\4\40\1\0\36\40\15\0"+
    "\1\103\37\0\3\43\2\0\1\43\1\0\1\43\3\0"+
    "\1\43\5\0\24\43\10\0\3\46\1\104\5\46\1\0"+
    "\46\46\1\45\5\46\1\0\43\46\3\0\1\104\51\0"+
    "\11\52\4\0\44\52\1\105\1\51\47\52\11\53\4\0"+
    "\40\53\1\0\2\4\4\0\1\4\11\0\2\4\1\62"+
    "\21\4\11\0\2\4\4\0\1\4\11\0\23\4\1\106"+
    "\11\0\2\4\4\0\1\4\11\0\12\4\1\107\11\4"+
    "\11\0\2\4\4\0\1\4\11\0\5\4\1\110\16\4"+
    "\11\0\2\4\4\0\1\4\11\0\14\4\1\111\1\4"+
    "\1\112\5\4\11\0\2\4\4\0\1\4\11\0\6\4"+
    "\1\113\15\4\11\0\2\4\4\0\1\4\11\0\17\4"+
    "\1\114\4\4\11\0\2\4\4\0\1\4\11\0\6\4"+
    "\1\115\15\4\11\0\2\4\4\0\1\4\11\0\6\4"+
    "\1\116\15\4\11\0\2\4\4\0\1\4\11\0\4\4"+
    "\1\55\17\4\11\0\2\4\4\0\1\117\11\0\21\4"+
    "\1\115\2\4\11\0\2\4\4\0\1\4\11\0\14\4"+
    "\1\62\7\4\11\0\2\4\4\0\1\4\11\0\3\4"+
    "\1\120\20\4\11\0\2\4\4\0\1\4\11\0\11\4"+
    "\1\115\12\4\11\0\2\4\4\0\1\4\11\0\22\4"+
    "\1\121\1\4\11\0\2\4\4\0\1\4\11\0\2\4"+
    "\1\122\21\4\11\0\2\4\4\0\1\4\11\0\3\4"+
    "\1\123\20\4\11\0\2\4\4\0\1\4\11\0\6\4"+
    "\1\124\15\4\11\0\2\4\4\0\1\4\11\0\2\4"+
    "\1\125\21\4\11\0\2\4\4\0\1\4\11\0\15\4"+
    "\1\126\6\4\11\0\2\4\4\0\1\4\11\0\4\4"+
    "\1\127\17\4\11\0\2\4\4\0\1\4\11\0\16\4"+
    "\1\55\5\4\11\0\2\4\4\0\1\4\11\0\13\4"+
    "\1\130\10\4\11\0\2\4\4\0\1\4\11\0\6\4"+
    "\1\131\15\4\11\0\2\4\4\0\1\4\11\0\11\4"+
    "\1\132\12\4\11\0\2\4\4\0\1\4\11\0\20\4"+
    "\1\62\3\4\11\0\2\4\4\0\1\4\11\0\4\4"+
    "\1\133\17\4\11\0\2\4\4\0\1\4\11\0\2\4"+
    "\1\134\21\4\11\0\2\4\4\0\1\4\11\0\4\4"+
    "\1\62\17\4\11\0\2\4\4\0\1\4\11\0\14\4"+
    "\1\135\7\4\11\0\2\4\4\0\1\4\11\0\12\4"+
    "\1\136\11\4\11\0\2\4\4\0\1\4\11\0\5\4"+
    "\1\115\16\4\11\0\2\4\4\0\1\4\11\0\16\4"+
    "\1\117\5\4\11\0\2\4\4\0\1\4\11\0\20\4"+
    "\1\137\3\4\11\0\2\4\4\0\1\4\11\0\12\4"+
    "\1\140\11\4\11\0\2\4\4\0\1\4\11\0\10\4"+
    "\1\62\13\4\11\0\2\4\4\0\1\4\11\0\16\4"+
    "\1\62\5\4\11\0\2\4\4\0\1\4\11\0\1\4"+
    "\1\141\22\4\11\0\2\4\4\0\1\4\11\0\12\4"+
    "\1\142\11\4\11\0\2\4\4\0\1\4\11\0\3\4"+
    "\1\143\10\4\1\144\7\4\11\0\2\4\4\0\1\4"+
    "\11\0\1\4\1\62\2\4\1\62\17\4\11\0\2\4"+
    "\4\0\1\4\11\0\2\4\1\145\21\4\11\0\2\4"+
    "\4\0\1\4\11\0\2\4\1\146\21\4\11\0\2\4"+
    "\4\0\1\4\11\0\3\4\1\147\20\4\11\0\2\4"+
    "\4\0\1\4\11\0\1\4\1\62\22\4\11\0\2\4"+
    "\4\0\1\4\11\0\16\4\1\150\5\4\11\0\2\4"+
    "\4\0\1\4\11\0\14\4\1\151\7\4\11\0\2\4"+
    "\4\0\1\4\11\0\5\4\1\152\16\4\11\0\2\4"+
    "\4\0\1\4\11\0\14\4\1\153\7\4\11\0\2\4"+
    "\4\0\1\4\11\0\1\4\1\145\22\4\11\0\2\4"+
    "\4\0\1\4\11\0\3\4\1\143\20\4\11\0\2\4"+
    "\4\0\1\4\11\0\12\4\1\62\11\4\11\0\2\4"+
    "\4\0\1\4\11\0\14\4\1\106\7\4\11\0\2\4"+
    "\4\0\1\4\11\0\22\4\1\154\1\4\11\0\2\4"+
    "\4\0\1\4\11\0\20\4\1\155\3\4\11\0\2\4"+
    "\4\0\1\4\11\0\5\4\1\145\16\4\11\0\2\4"+
    "\4\0\1\4\11\0\15\4\1\67\6\4\11\0\2\4"+
    "\4\0\1\4\11\0\2\4\1\156\21\4\11\0\2\4"+
    "\4\0\1\4\11\0\3\4\1\157\20\4\11\0\2\4"+
    "\4\0\1\4\11\0\4\4\1\160\17\4\11\0\2\4"+
    "\4\0\1\4\11\0\16\4\1\161\5\4\11\0\2\4"+
    "\4\0\1\4\11\0\2\4\1\151\21\4\11\0\2\4"+
    "\4\0\1\4\11\0\2\4\1\136\21\4\11\0\2\4"+
    "\4\0\1\4\11\0\6\4\1\62\15\4\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4545];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\1\1\1\11\2\1\1\11"+
    "\23\1\1\11\3\1\1\11\1\1\1\0\1\11\3\1"+
    "\1\11\26\1\3\11\54\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  	
  /**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public EditorTokenMaker() {
	}

  
  
	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}

	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}

	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (Exception e) {
			e.printStackTrace();
			return new TokenImpl();
		}

	}

	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}

	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EditorTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }




    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }





  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
        	  zzInput = zzBufferL[zzCurrentPosL++];
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
            	zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 20: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 21: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 22: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 23: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 24: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 26: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 27: break;
        case 9: 
          { 
          }
        case 28: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 29: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 30: break;
        case 12: 
          { addToken(Token.ERROR_CHAR);
          }
        case 31: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 32: break;
        case 14: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 33: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 34: break;
        case 16: 
          { addToken(Token.RESERVED_WORD);
          }
        case 35: break;
        case 17: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 36: break;
        case 18: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 37: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 38: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 114: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 115: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
